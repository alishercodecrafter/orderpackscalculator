// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alishercodecrafter/orderpackscalculator/internal/service (interfaces: PacksRepository)

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	model "github.com/alishercodecrafter/orderpackscalculator/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockPacksRepository is a mock of PacksRepository interface.
type MockPacksRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPacksRepositoryMockRecorder
}

// MockPacksRepositoryMockRecorder is the mock recorder for MockPacksRepository.
type MockPacksRepositoryMockRecorder struct {
	mock *MockPacksRepository
}

// NewMockPacksRepository creates a new mock instance.
func NewMockPacksRepository(ctrl *gomock.Controller) *MockPacksRepository {
	mock := &MockPacksRepository{ctrl: ctrl}
	mock.recorder = &MockPacksRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacksRepository) EXPECT() *MockPacksRepositoryMockRecorder {
	return m.recorder
}

// AddPack mocks base method.
func (m *MockPacksRepository) AddPack(arg0 model.Pack) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPack", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPack indicates an expected call of AddPack.
func (mr *MockPacksRepositoryMockRecorder) AddPack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPack", reflect.TypeOf((*MockPacksRepository)(nil).AddPack), arg0)
}

// GetPacks mocks base method.
func (m *MockPacksRepository) GetPacks() model.Packs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPacks")
	ret0, _ := ret[0].(model.Packs)
	return ret0
}

// GetPacks indicates an expected call of GetPacks.
func (mr *MockPacksRepositoryMockRecorder) GetPacks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPacks", reflect.TypeOf((*MockPacksRepository)(nil).GetPacks))
}

// RemovePack mocks base method.
func (m *MockPacksRepository) RemovePack(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePack", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePack indicates an expected call of RemovePack.
func (mr *MockPacksRepositoryMockRecorder) RemovePack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePack", reflect.TypeOf((*MockPacksRepository)(nil).RemovePack), arg0)
}
